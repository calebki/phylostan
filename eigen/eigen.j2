#include <Eigen/Dense>
#include <Eigen/SparseCore>
#include <algorithm>
#include <iostream>
#include <cassert>
#include <vector>
#include <map>

#include "value_grad.hpp"

using std::map;
using std::vector;

typedef Eigen::SparseMatrix<double> SpMat;
typedef Eigen::Matrix<double, 4, {{num_sites}}> Partial;
typedef vector<Partial> PartialVector;
typedef map<int, Partial> PartialNodeMap;

const std::vector<int> child_parent = { 
    {{ child_parent | join(',') }}
};

const std::vector<int> postorder = { 
    {{ postorder | join(',') }}
};

const vector<vector<Eigen::Triplet<double> > > sparse_tip_partials = {
    {% for tp in sparse_tip_partials %}
    {
    {% for i, j, v in tp %}
        { {{i}}, {{j}}, {{v}} },
    {% endfor %}
    },
    {% endfor %}
};

const Eigen::Vector4d pi = (Eigen::Vector4d() << {{ pi | join(',') }}).finished();
const Eigen::Matrix4d Q = (Eigen::Matrix4d() << {{ Q.reshape(-1).tolist() | join(',') }}).finished();

struct transition_matrix {
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW
    Eigen::EigenSolver<Eigen::Matrix4d> es;
    Eigen::Matrix4cd P, Pinv;
    Eigen::Vector4cd d;

    transition_matrix(const Eigen::Matrix4d Q) : es(Q), P(es.eigenvectors()),
        Pinv(P.inverse()), d(es.eigenvalues()) {}

    Eigen::Matrix4d exp_tQ (const double t)
    {
        return (P * ((t * d).array().exp().matrix().asDiagonal()) * Pinv).real();
    }
};


value_grad vbsky_loglik(const vector<double> &times)
{
    /*
       Compute the likeliood of alignment using pruning algorithm given:

           tip_partials: vector length `n` giving partial likelihoods at each tip for each site.
           child_parent: vector mapping child nodes to parent nodes.
           postorder: postorder traversal order. It is assumed that the leaves are numbered 0, ..., `n - 1`
           times: times[i] is the branch length above node i. same length as postorder; entry for root is ignored.
    */
    const int num_nodes = postorder.size();
    const int num_sites = {{num_sites}};
    vector<Partial> tip_partials;
    SpMat m(4, {{num_sites}});
    for (auto &v : sparse_tip_partials) 
    {
        m.setFromTriplets(v.begin(), v.end());
        tip_partials.push_back(m);
    }
    const int num_leaves = tip_partials.size();
    assert(num_nodes == 2 * num_leaves - 1);
    assert(times.size() == postorder.size() - 1);

    transition_matrix trans(Q);

    PartialVector postorder_partials(tip_partials), preorder_partials(num_nodes);  // denoted a p, q in m.s.
    // enlarge partials to accomodate interior partials; entries 0, ..., num_leaves - 1 are the partials at the tips
    postorder_partials.resize(num_nodes);

    // create a mapping of the (two) child nodes of each parent
    int parent, child;
    map<int, std::pair<int, int> > parent_child;
    for (int i = 0; i < child_parent.size(); ++i)
    {
        parent = child_parent.at(i);
        if (parent == -1) continue;  // root
        std::pair<int, int> &p = parent_child[parent];
        // this will populate both entries of the pair, assuming that there are
        // only two children per parent
        p.second = p.first;
        p.first = i;
    }
    // std::cout << "parent_child: " << parent_child << std::endl;

    // create a mapping of each child's sibling, i.e. the other child of its parent
    map<int, int> sibling;
    for (auto &kv : parent_child)
    {
        std::pair<int, int> &p = kv.second;
        sibling[p.first] = p.second;
        sibling[p.second] = p.first;
    }


    /*** Skip for now in favor of inverting P. ***/
    // Decompose the transition matrix for later use. We are going to repeatedly solve
    // equations of the form `exp(t * Q) A = B` for B. This is equivalent
    // to `diag(exp(d * t)) P^T A = P^T B`.
    // Eigen::PartialPivLU<Partial> P_T_lu(P.transpose());

    PartialNodeMap Pi_pi;  // P[i] @ p[i]
    Partial A;
    Eigen::Matrix4d B;

    // Compute all postorder partials
    for (int i = 0; i < postorder.size(); ++i)
    {
        parent = postorder.at(i);
        if (parent < num_leaves) continue;  // node is a leaf node; partial has already been populated
        postorder_partials.at(parent) = Partial::Ones(4, num_sites);
        std::pair<int, int> &p = parent_child.at(parent);
        // std::cout << "po-p parent=" << parent << " ";
        for (int child : {p.first, p.second})
        {
            // std::cout << "child=" << child << " ";
            // for each child of interior node parent, compute the transition
            // matrix along the branch of length `times[child]`.
            // We have: p_parent = P[i] * p_child = P exp(t * d) P^{-1} @ partial[child]
            Pi_pi.insert({child, trans.exp_tQ(times.at(child)) * postorder_partials.at(child)});
            // std::cout << " Pi_pi[child]=" << std::endl << Pi_pi[child] << std::endl;
            postorder_partials.at(parent) = postorder_partials.at(parent).cwiseProduct(Pi_pi.at(child));
        }
        // std::cout << "partial=" << std::endl << postorder_partials[parent] << std::endl << std::endl;
        // std::cout << "postorder_partials: " << std::endl << postorder_partials;
    }

    // Compute all preorder partials by iterating postorder vector in reverse
    preorder_partials.at(postorder.back()).colwise() = pi;  // root node
    for (int i = postorder.size() - 2; i >= 0; --i)
    {
        child = postorder.at(i);
        parent = child_parent.at(child);
        // Equation (7)
        A = preorder_partials.at(parent).cwiseProduct(Pi_pi.at(sibling.at(child)));
        B = trans.exp_tQ(times.at(child)).transpose();
        // preorder_partials[child] = q[i] = P[i]^T @ A = Pinv.T @ e^(t[i] d) @ P.T @ A
        preorder_partials.at(child) = B * A;
        /* std::cout << "preorder_partials child=" << child << " sibling=" << sibling[child] << 
                      " Pi_pi[sibling[child]]=" << Pi_pi[sibling[child]] << " q[child]=" << 
                      std::endl << preorder_partials[child] << std::endl; */
    }

    // finally compute gradients from equation 9
    value_grad ret;
    Eigen::VectorXd P_Y = pi.transpose() * postorder_partials.back();  // the overall likelihood is pi * the root partial
    ret.log_P = P_Y.array().log().sum();
    Eigen::MatrixXd grad(num_nodes, num_sites);
    for (int i = 0; i < num_nodes; ++i)
        grad.row(i) = ((times[i] * Q.transpose()) * preorder_partials.at(i)).cwiseProduct(postorder_partials.at(i)).colwise().sum();
    ret.grad = grad * (1. / P_Y.array()).matrix();
    return ret;
}


double pruning_loglik(const Eigen::Matrix<double, Eigen::Dynamic, 1>& blens, std::ostream*) 
{
    vector<double> times;
    for (int i = 0; i < blens.rows(); ++i) times.push_back(blens(i));
    value_grad ll = vbsky_loglik(times);
    return ll.log_P;
}

