install.packages("bioconductor")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
update.packages(ask=FALSE)
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
browseVignettes("ggtree")
BiocManager::install("ggtree", version = "3.8")
browseVignettes("ggtree")
x <- c(x, floor((1-u)^(-1/a)));
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
p_grid <- seq(0.1,1,0.1)
alpha_grid <- seq(0.5,2.5,1)
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
install.packages("Rcpp")
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
install.packages('foreach')
install.packages('doParallel')
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
example_asymptotics_histograms()
knitr::opts_chunk$set(echo = TRUE)
library(truncnorm)
library(truncnorm)
install.packages("truncnorm")
library(truncnorm)
b_true <- 0.4
reg <- rnorm(100)
a_true <- 1
b_true <- 0.4
X <- rnorm(n = length(reg), mean = a_true + b_true * reg, 1)
Y <- as.integer(X > 0)
tt <- glm(Y ~ reg, family = binomial(link = 'probit'))
post_mean <- function(y, t, a, b) {
if (y == 1)
return(truncnorm::etruncnorm(a = 0, mean = a + b * t, sd = 1))
else
return(truncnorm::etruncnorm(b = 0, mean = a + b * t, sd = 1))
}
mle <- function(x, t) {
n <- length(t)
a_inf <- mean(x)
t_tilde <- t - mean(t)
b_inf <- sum(t_tilde * (x - a_inf)) / sum(t_tilde^2)
return(c(a_inf, b_inf))
}
trans <- function(theta, t) {
return(c(theta[1] - mean(t) * theta[2], theta[2]))
}
init <- c(0.1, -0.1)
post_mean_vec <- function(ys, t, a, b) {
N <- length(ys)
pmean <- rep(0, length(ys))
for (n in 1:N)
pmean[n] <- post_mean(ys[n], t[n], a, b)
return(pmean)
}
algo <- function(ys, t, init, maxiter = 1000) {
theta_tm1 <- init
thetas <- list()
for (n in 1:maxiter) {
post_exp <- post_mean_vec(ys, t, theta_tm1[1], theta_tm1[2])
theta <- trans(mle(post_exp, t), t)
theta_tm1 <- theta
thetas[[n]] <- theta
}
return(thetas)
}
test <- algo(Y, reg, c(1,0.1), 100)
source('~/Desktop/calebki@umich.edu/Classes/Second-Winter/Stats620/HW3/MC_code.R', echo=TRUE)
example_asymptotics_histograms()
install.packages('Rcolgem')
install.packages('rcolgem')
install.packages("rcolgem", repos="http://R-Forge.R-project.org")
install.packages("rcolgem", repos="http://R-Forge.R-project.org", dependencies = True)
install.packages("rcolgem", repos="http://R-Forge.R-project.org", dependencies = T)
install.packages("rcolgem", repos="http://R-Forge.R-project.org", dependencies = c("ape", "inline"))
install.packages("aple")
install.packages('phytools')
install.packages('animation')
install.packages('animation')
install.packages('curl')
install.packages('animation')
install.packages('animation')
install.packages('phytools')
install.packages('mnormt')
install.packages('mnormt')
install.packages('mnormt')
install.packages('phytools')
source('~/Desktop/Git/vbsky/Simulations/sim_data.R')
install.packages('rcolgem')
install.packages("rcolgem", repos="http://R-Forge.R-project.org")
install.packages('inline')
install.packages("rcolgem", repos="http://R-Forge.R-project.org")
install.packages('RcppArmadillo')
install.packages("rcolgem", repos="http://R-Forge.R-project.org")
source('~/Desktop/Git/vbsky/Simulations/sim_data.R')
show.demographic.process(SIR_model, theta, x0, t0, t1)
sample_times <- runif(n, t0, t1)
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
sample_times <- runif(n, t0, t1)
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
class(tree)
L <- 30000
rate <- rgamma(n=L,shape=0.25,rate=0.25)
sim <- genSeq(tree,l=L,rate=rate)
library(phytools)
L <- 30000
rate <- rgamma(n=L,shape=0.25,rate=0.25)
sim <- genSeq(tree,l=L,rate=rate)
sim
sim[1:2]
dist <- SIR_model(theta, x0, t0, t1)[[5]]["I"]
dist
dist <- SIR_model(theta, x0, t0, t1)[[5]]
dist
dist <- SIR_model(theta, x0, t0, t1)[[5]]$I
SIR_model(theta, x0, t0, t1)[[5]][,2]
I <- SIR_model(theta, x0, t0, t1)[[5]][,2]
I
plot(I)
density(I)
dist <- density(I)
dist(50)
dist
dist(100)
dist(-5)
plot(dist)
plot(I)
I
I <- I/sum(I)
I
plot(I)
cumsum(I)
argmax(I < .99)
min(which(I > .99))
I > .99
.99 < I
I
I <- cumsum(I)
I > .99
min(which(I > .99))
total <- SIR_model(theta, x0, t0, t1)[[5]][1000,]["I"] + SIR_model(theta, x0, t0, t1)[[5]][1000,]["R"]
total
total * .05
sample_times
sample_times <- runif(n)
sample_times
get_sample_time <- function(t){
return(min(which(I > t)))
}
ts <- runif(n)
sample_times <- sapply(ts, get_sample_time)
sample_times
sample_times <- sapply(ts, get_sample_time) / 1000 * phi
sample_times
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
get_sample_time <- function(t){
return(min(which(I > t)))
}
sample_times <- sapply(ts, get_sample_time) / 1000 * phi
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
get_sample_time <- function(t){
return(min(which(I > t)))
}
sample_times <- sapply(ts, get_sample_time) / 1000 * phi
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
theta <- c(beta=7, gamma=3.5)
t0 <- 0
t1 <- 5
x0 <- c(S = 1999, I = 1, Dummy = 0, R = 0)
I <- SIR_model(theta, x0, t0, t1)[[5]][,2]
I <- cumsum(I/sum(I))
phi <- 0.05
total <- SIR_model(theta, x0, t0, t1)[[5]][1000,]["I"] + SIR_model(theta, x0, t0, t1)[[5]][1000,]["R"]
n <- unname(round(phi*(total)))
ts <- runif(n)
get_sample_time <- function(t){
return(min(which(I > t)))
}
sample_times <- sapply(ts, get_sample_time) / 1000 * phi
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
sample_times
show.demographic.process(SIR_model(), theta, x0, t0, t1)
show.demographic.process(SIR_model, theta, x0, t0, t1)
sample_times <- sapply(ts, get_sample_time) / 1000 * t1
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
ts <- runif(n)
get_sample_time <- function(t){
return(min(which(I > t)))
}
sample_times <- sapply(ts, get_sample_time) / 1000 * t1
sample_states <- t(replicate(n, c(1,0)))
tree <- sim.co.tree(theta, SIR_model, x0, t0, sample_times, sample_states)
plot.phylo(tree)
L <- 10000
rate <- rgamma(n=L,shape=0.25,rate=0.25)
sim <- genSeq(tree,l=L,rate=rate)
L <- 10000
rate <- rgamma(n=L,shape=0.25,rate=0.25)
sim <- genSeq(tree,l=L,rate=rate)
source('~/Desktop/Git/vbsky/Simulations/sim_data.R', echo=TRUE)
sim <- genSeq(tree,l=L,rate=rate)
setwd("~/Desktop/Git/vbsky/phylostan/examples/sim")
source('~/Desktop/Git/vbsky/phylostan/examples/sim/sim_data.R', echo=TRUE)
source('~/Desktop/Git/vbsky/phylostan/examples/sim/sim_data.R', echo=TRUE)
source('~/Desktop/Git/vbsky/phylostan/examples/sim/sim_data.R', echo=TRUE)
SIR_model(theta, x0, t0, t1)[[5]][500,]["S"]
SIR_model(theta, x0, t0, t1)[[5]][501,]["S"]
show.demographic.process(demo.model, theta, x0, t0, t1)
show.demographic.process(SIR_model, theta, x0, t0, t1)
